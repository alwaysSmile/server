var http = require('http');//Полключаем модуль http
//http.Server() - умеет слушать ip - порт
//и отвечать на входящие запросы
var server = new http.Server();//.Server() - это объект модуля http
//Иерархия наследования .Server
// http.Server -> net.Server -> EventEmitter
//Для того, чтобы дать ему ip - порт используется команда .listen
server.listen(1337, '127.0.0.1');
//Для того, чтобы отвечать на запросы используется событие,
//server является EventEmitter - ом
//При входящих запросах инициирутся событие, которое называется 'request' и
//его обработчик получает два объекта function (reg, res) {res.end("Привет, мир!")}
//reg - входящий запрос - он содержит инфу, которую содержит браузер, включая url пришедшего запроса
//res - объект ответа - из первого - reg мы читаем, во второй res - пишем

var counter = 0;//счётчик запросов

//Все события генерируются вызовом
var emit = server.emit;//переопределяем этот метод на наш собственный
//Метод server.emit принимает название события и необходимые данные для него,
//в данном случае это будет reg, res
server.emit = function (event /* , arg1, arg2,... */) {
   console.log(event);//Выводим название события => listening
   emit.apply(server, arguments);//Передаём вызов исходному методу emit
}

server.on('request', function (reg, res) {
    res.end("Привет, мир! " + ++counter);//Заканчиваем выполнение запроса отсылая фразу привет мир
});

//Событие connection возникает тогда, когда браузер открывет
//к серверу новое сетевое соединение
//Событие request присылает запрос
//Браузер устроен так, что одно сетевое соединение
//он старается использовать по максимуму, называется это Keep-Alive,
//он его сохраняет и по нему гонит новые запросы